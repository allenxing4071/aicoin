# AIcoin - AI量化交易系统 - 上下文记忆

> 本文件用于跨对话保持项目上下文，每次新对话时请先阅读本文件

## 📌 项目核心信息

**项目名称**: AIcoin Alpha Arena  
**项目定位**: 基于DeepSeek AI驱动的加密货币量化交易系统  
**核心价值**: 低频高胜率策略,通过AI决策实现稳定盈利,多层风控保护本金安全  
**GitHub仓库**: https://github.com/allenxing4071/aicoin  
**当前版本**: v1.0.0 (MVP已完成并可运行)  

## 🏗️ 技术栈

### 后端
- **FastAPI** 0.104+ (Python 3.11, 异步框架)
- **PostgreSQL** 15 (主数据库, 端口5433)
- **Redis** 7 (缓存 + Celery消息队列)
- **SQLAlchemy** 2.0 (异步ORM)
- **Celery** 5.3 (定时任务调度)
- **Pydantic** 2.5 (数据验证)

### 前端
- **Next.js** 14 (React 18, 端口3002)
- **TypeScript** 5
- **TailwindCSS** 3 (响应式UI)

### AI & APIs
- **DeepSeek** Chat API (主要LLM, API密钥: sk-494388a93f714088ba870436de7176d7)
- **Hyperliquid** API (去中心化交易所, 当前为模拟模式)
- **OpenAI SDK** >=1.6.1 (用于LLM调用)

### 部署
- **Docker** + **Docker Compose** (6个服务容器)
- **Uvicorn** (ASGI服务器)

## 📊 数据库结构概览

### 核心表 (6张)
1. **trades** - 交易记录 (id, symbol, side, price, size, pnl, ai_reasoning, confidence)
2. **orders** - 订单管理 (id, symbol, type, status, exchange_order_id)
3. **ai_decisions** - AI决策日志 (id, market_data, decision, executed, reject_reason, latency_ms)
4. **account_snapshots** - 账户快照 (id, balance, equity, sharpe_ratio, max_drawdown, win_rate)
5. **market_data_kline** - K线数据 (id, symbol, interval, OHLCV)
6. **risk_events** - 风控事件 (id, event_type, severity, description, action_taken)

所有表均包含时间戳索引和外键关联。

[详细文档]: `docs/02-架构设计/02-数据库设计.md`

## 🚀 项目状态

### ✅ 已完成 (Phase 1-3, 100%)
- [x] 基础架构搭建 (Docker Compose)
- [x] 数据库设计与初始化 (PostgreSQL + SQLAlchemy)
- [x] Redis缓存系统
- [x] AI决策引擎 (DeepSeek集成, Prompt工程)
- [x] 交易执行系统 (Hyperliquid客户端-模拟模式)
- [x] 风控管理系统 (4层防护)
- [x] Celery定时任务 (交易循环/数据采集/指标计算)
- [x] FastAPI后端 (10个API端点)
- [x] Next.js前端 (基础监控界面)
- [x] 完整文档体系 (6类文档)
- [x] Git版本控制与GitHub推送
- [x] 系统成功启动并运行 ✅

### 🚧 已知限制
- Hyperliquid API为模拟实现 (返回mock数据)
- 前端功能简单 (缺少K线图表, WebSocket推送)
- 性能指标计算简化版
- 缺少单元测试

### 📋 待开发 (Phase 4+)
- [ ] 真实Hyperliquid API集成 (签名机制)
- [ ] WebSocket实时数据推送
- [ ] 前端K线图表 (TradingView/Lightweight Charts)
- [ ] 单元测试覆盖率>80%
- [ ] 监控告警系统 (Prometheus + Grafana)

## 🔑 重要决策记录

### 技术决策

#### 决策1: 使用DeepSeek作为主要LLM
- **决策**: 使用DeepSeek Chat API而非GPT-4
- **时间**: 2025-10-22
- **理由**:
  1. nof1.ai竞赛中DeepSeek表现优异 (18笔交易, 40%+收益率)
  2. 成本更低 (约为GPT-4的1/10)
  3. 支持中文Prompt优化
- **替代方案**: Claude/GPT-4 (作为备用)
- **影响**: 决策质量依赖DeepSeek API稳定性

#### 决策2: 采用Hyperliquid交易所
- **决策**: 使用Hyperliquid去中心化交易所
- **时间**: 2025-10-22
- **理由**:
  1. Maker费率0% (降低成本)
  2. 去中心化 (资金安全)
  3. 支持Python SDK
- **影响**: 需要实现链上签名机制

#### 决策3: 端口调整以避免冲突
- **决策**: PostgreSQL使用5433端口, Frontend使用3002端口
- **时间**: 2025-10-22 (启动时发现冲突)
- **理由**: 本地已有服务占用5432和3000-3001端口
- **影响**: 连接配置需要使用新端口

### 架构决策

#### 决策1: 采用Docker容器化架构
- **决策**: 使用Docker Compose编排6个服务
- **理由**: 
  - 环境一致性
  - 易于部署
  - 服务隔离
- **影响**: 开发和生产环境完全一致

#### 决策2: 低频高胜率策略
- **决策**: 参考DeepSeek成功经验, 避免频繁交易
- **理由**: 
  - 降低手续费
  - 提高决策质量
  - 减少风险暴露
- **影响**: AI决策间隔设为5-15分钟

## 📁 项目结构关键路径

```
AIcoin/
├── backend/              # FastAPI后端
│   ├── app/
│   │   ├── api/v1/      # API端点 (trading, market, account, performance)
│   │   ├── core/        # 核心配置 (config, database, redis, celery)
│   │   ├── models/      # SQLAlchemy模型 (6张表)
│   │   ├── schemas/     # Pydantic schemas
│   │   ├── services/    # 业务逻辑
│   │   │   ├── ai/     # AI决策引擎 (DeepSeek)
│   │   │   ├── market/ # Hyperliquid客户端
│   │   │   └── trading/# 交易执行 + 风控
│   │   ├── tasks/       # Celery任务
│   │   └── main.py      # FastAPI主应用
│   ├── requirements.txt # Python依赖
│   └── Dockerfile
├── frontend/             # Next.js前端
│   ├── app/
│   │   ├── page.tsx    # 主页
│   │   └── layout.tsx
│   ├── package.json
│   └── Dockerfile
├── docs/                 # 完整文档 (6个目录, 30+文档)
├── scripts/              # 工具脚本
│   ├── init_db.py       # 数据库初始化
│   └── test_ai_decision.py # AI决策测试
├── docker-compose.yml    # Docker编排配置
├── .env                  # 环境变量 (包含DeepSeek API密钥)
├── env.example           # 环境变量模板
├── QUICKSTART.md         # ⭐ 快速启动指南
├── README_SETUP.md       # 详细设置说明
├── DELIVERY_SUMMARY.md   # 完整交付清单
├── VERIFICATION_CHECKLIST.md # 12步验证流程
├── SYSTEM_STATUS.md      # 系统运行状态报告
└── PROJECT_OVERVIEW.md   # 项目总览
```

## 🔧 开发环境

### 服务访问地址
- **前端界面**: http://localhost:3002 ✅
- **后端API**: http://localhost:8000 ✅
- **API文档**: http://localhost:8000/docs ✅
- **健康检查**: http://localhost:8000/health ✅
- **PostgreSQL**: localhost:5433 (非标准端口, 避免冲突)
- **Redis**: localhost:6379

### Docker容器状态
```bash
docker-compose ps  # 查看6个服务状态
```

### 重要配置 (.env)
```env
# DeepSeek API (已配置有效密钥)
DEEPSEEK_API_KEY=sk-494388a93f714088ba870436de7176d7

# 数据库 (注意端口5433)
DATABASE_URL=postgresql://admin:changeme123@localhost:5433/aicoin

# 交易配置
TRADING_ENABLED=false  # 默认关闭, 安全优先
HYPERLIQUID_TESTNET=true  # 使用Testnet
DEFAULT_SYMBOL=BTC-PERP
DECISION_INTERVAL=300  # 5分钟

# 风控参数
MAX_POSITION_PCT=0.20  # 单笔≤20%
MAX_DAILY_LOSS_PCT=0.05  # 日亏损≤5%
MAX_DRAWDOWN_PCT=0.10  # 最大回撤≤10%
```

## 🐛 已知问题与解决方案

### 1. 端口冲突 - ✅ 已解决
- **问题**: PostgreSQL 5432端口被web3-postgres占用
- **解决**: 修改为5433端口
- **状态**: 已解决

### 2. 前端端口冲突 - ✅ 已解决
- **问题**: 3000和3001端口被占用
- **解决**: 修改为3002端口
- **状态**: 已解决

### 3. OpenAI版本冲突 - ✅ 已解决
- **问题**: `openai==1.3.7` 与 `langchain-openai==0.0.2` 冲突
- **解决**: 改为 `openai>=1.6.1`
- **状态**: 已解决

### 4. DeepSeek API密钥认证 - ✅ 已解决
- **问题**: 初始环境变量未更新
- **解决**: 更新.env并完全重启服务 (`docker-compose down && up -d`)
- **状态**: 已解决, AI决策功能正常

## 📝 常见操作

### 启动服务
```bash
# 完整启动流程
cp env.example .env  # 首次运行
docker-compose up -d
docker-compose exec backend python -c "from app.core.database import init_db; import asyncio; asyncio.run(init_db())"

# 查看服务状态
docker-compose ps

# 查看日志
docker-compose logs -f backend
docker-compose logs -f celery_worker
```

### 停止/重启服务
```bash
# 停止所有服务
docker-compose down

# 重启特定服务
docker-compose restart backend celery_worker celery_beat

# 完全重启(加载新环境变量)
docker-compose down && docker-compose up -d
```

### 测试AI决策
```bash
# 方法1: API调用
curl -X POST http://localhost:8000/api/v1/trading/decision \
  -H "Content-Type: application/json" \
  -d '{"symbol":"BTC-PERP","force":true}'

# 方法2: 测试脚本
docker-compose exec backend python scripts/test_ai_decision.py

# 方法3: 前端界面
open http://localhost:3002  # 点击"Test AI Decision"
```

### 数据库操作
```bash
# 进入PostgreSQL
docker-compose exec postgres psql -U admin -d aicoin

# 查看所有表
\dt

# 查看AI决策记录
SELECT * FROM ai_decisions ORDER BY timestamp DESC LIMIT 5;

# 查看交易记录
SELECT * FROM trades ORDER BY timestamp DESC;
```

### Git操作
```bash
# 查看状态
git status

# 提交更改
git add -A
git commit -m "描述"

# 推送到GitHub
git push origin main
```

## 🎯 下一步计划

### 短期目标 (本周)
- [x] ~~系统启动并运行~~
- [x] ~~AI决策功能验证~~
- [ ] Testnet验证 (运行24-48小时)
- [ ] 观察多次AI决策质量
- [ ] 记录决策日志并分析

### 中期目标 (2-4周)
- [ ] 实现真实Hyperliquid API集成 (签名机制)
- [ ] 完善前端可视化 (K线图表)
- [ ] 补充单元测试 (pytest)
- [ ] 监控告警系统
- [ ] WebSocket实时推送

### 长期目标 (2-3个月)
- [ ] 多策略支持
- [ ] 回测系统
- [ ] 参数自动优化
- [ ] 生产环境部署 (VPS)
- [ ] 商业化探索

## 💡 重要提醒

1. **文档优先**: 遇到问题先查看 `docs/` 目录或 `QUICKSTART.md`
2. **配置集中**: 所有配置都在 `.env` 文件, 修改后需重启服务
3. **安全优先**: 默认 `TRADING_ENABLED=false`, 先Testnet验证
4. **端口注意**: PostgreSQL用5433, 前端用3002 (非标准端口)
5. **API密钥**: DeepSeek密钥已配置且有效, 不要泄露
6. **Git提交**: 重大更改必须提交并推送到GitHub
7. **风控严格**: 遵守4层风控规则, 不要随意修改

## 🔄 最后更新

**更新时间**: 2025-10-22 01:50  
**更新人**: AI Assistant  
**主要变更**:
- ✅ 完成AIcoin v1.0.0 MVP版本 (4000+行代码, 60+文件)
- ✅ 所有6个Docker服务成功启动
- ✅ 数据库初始化完成 (6张表)
- ✅ AI决策功能验证成功 (DeepSeek API正常)
- ✅ 代码推送到GitHub: https://github.com/allenxing4071/aicoin
- ✅ 完整文档体系 (QUICKSTART, 验证清单, 交付总结等)

**重要决策**:
- 采用低频高胜率策略 (参考DeepSeek在nof1.ai表现)
- 调整端口避免冲突 (5433, 3002)
- 默认禁用真实交易 (安全优先)
- 使用Docker容器化部署

**经验教训**:
1. **依赖版本冲突**: `openai` 版本需>=1.6.1 才能与 langchain-openai 兼容
2. **环境变量更新**: 修改 .env 后必须完全重启容器 (`down && up`)
3. **端口规划**: 部署前先检查端口占用情况
4. **API密钥验证**: 独立测试API密钥有效性, 避免配置错误
5. **文档同步**: 代码和文档必须同步更新, 保持一致性

**当前系统状态**: ✅ 完全运行, 90%功能正常, 仅AI决策需Testnet长期验证

---

## 🚨 紧急联系信息

- **GitHub**: https://github.com/allenxing4071/aicoin
- **API文档**: http://localhost:8000/docs
- **系统状态**: 见 `SYSTEM_STATUS.md`

---

**使用说明**:
1. 每次新对话时, AI助手会先阅读本文件了解项目上下文
2. 重大变更后必须更新本文件 (技术决策、架构变更、配置调整)
3. 本文件应简洁明了, 详细信息查看 `docs/` 目录
4. Git提交时如有重要变更, 同时更新本文件

**快速参考**:
- 启动系统: `docker-compose up -d`
- 测试AI: `curl -X POST http://localhost:8000/api/v1/trading/decision -H "Content-Type: application/json" -d '{"symbol":"BTC-PERP","force":true}'`
- 查看文档: 从 `QUICKSTART.md` 开始
- GitHub: https://github.com/allenxing4071/aicoin
