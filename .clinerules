# Claude Code 项目规则

## 🎯 项目��解协议

每次新对话开始时，请遵循以下步骤：

1. **优先阅读上下文文件**
   - 首先阅读 `.claudecontext` 文件了解项目全局信息
   - 查看 `docs/README.md` 了解文档结构
   - 参考 `README.md` 了解快速启动

2. **确认项目状态**
   - 检查 git status 了解当前修改
   - 查看最近的 git commits 了解最新进展
   - 如需数据库相关操作，参考相关数据库文档

3. **定位相关文档**
   - 功能开发: 查看 `docs/` 目录
   - 配置问题: 查看配置文件
   - API文档: 查看 API 文档

## 📋 开发规范

### 代码规范
- **后端**: 遵循语言的最佳实践，使用类型提示
- **前端**: 遵循框架规范，使用 TypeScript 严格模式
- **命名**: 使用清晰、语义化的命名
- **注释**: 复杂逻辑必须添加注释

### 数据库操作规范
- **禁止直接修改数据库**: 必须通过迁移工具
- **模型定义位置**: `[指定路径]`
- **迁移文件位置**: `[指定路径]`
- **执行迁移**: `[命令]`

### API开发规范
- **路由位置**: `[指定路径]`
- **Schema位置**: `[指定路径]`
- **响应格式**: 统一使用标准格式
- **错误处理**: 统一的错误处理机制

### 前端开发规范
- **组件位置**: `[指定路径]`
- **页面位置**: `[指定路径]`
- **API调用**: 使用封装的 API 方法
- **状态管理**: 使用项目选择的状态管理方案

## 🚫 禁止操作

1. **禁止删除或修改现有数据库数据**（除非明确要求）
2. **禁止修改核心配置文件**而不通知
3. **禁止提交敏感信息**（API密钥、密码等）到 git
4. **禁止跳过测试直接部署到生产环境**

## ✅ 推荐操作

1. **优先使用现有组件和工具**
   - 使用项目的启动脚本
   - 复用已有的组件
   - 使用已配置的工具

2. **文档驱动开发**
   - 功能开发前先查看是否有相关文档
   - 重大变更后更新 `.claudecontext`
   - 新增模块时创建相应文档

3. **渐进式开发**
   - 小步快跑，每次改动尽量小
   - 及时测试，避免累积问题
   - 重要功能使用分支开发

## 🔍 问题排查流程

1. **查看日志**
   - 应用日志: 查看日志文件或终端输出
   - 错误信息: 浏览器控制台或服务器日志

2. **检查配置**
   - 环境变量: `.env` 文件
   - 配置文件: 相关配置文件
   - 依赖版本: `package.json` 或类似文件

3. **参考文档**
   - 查看项目文档
   - 查看官方文档
   - 搜索已知问题

## 📝 commit规范

- `feat:` 新功能
- `fix:` 修复bug
- `docs:` 文档更新
- `refactor:` 代码重构
- `test:` 测试相关
- `chore:` 构建/工具/依赖更新

示例: `feat: 添加用户登录功能` 或 `fix: 修复列表分页问题`

## 🎯 AI助手特别提醒

1. **记忆持久化**: 重要决策和变更请更新 `.claudecontext` 文件
2. **文档同步**: 新功能开发完成后，同步更新相关文档
3. **上下文传递**: 每次对话开始时主动阅读上下文文件
4. **避免重复**: 遇到问题先查文档，避免重复回答

---

**最后更新**: [YYYY-MM-DD]
